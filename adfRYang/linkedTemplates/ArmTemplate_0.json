{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfRYang"
		},
		"AzureBlobMovie_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobMovie'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobMovie')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobMovie_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobMovie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze",
						"container": "data-factory-out"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobMovie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movie"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobMovie",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "Silver"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().tableName",
							"type": "Expression"
						},
						"container": "data-factory-out"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExplodeMovieJSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_blob",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "bronze",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(movie),",
						"     mapColumn(",
						"          movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(DataSource = \"Manual Upload\",",
						"          IngestTime = currentTimestamp(),",
						"          Status = \"new\",",
						"          IngestDate = currentDate(\"yyyy.MM.dd\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_blob')]",
				"[concat(variables('factoryId'), '/datasets/bronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze",
								"type": "DatasetReference"
							},
							"name": "Bronze4Silver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkMovieSilver"
						},
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkLangSilver"
						},
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkGenreSilver"
						},
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkGenreMovieSilver"
						},
						{
							"dataset": {
								"referenceName": "bronze",
								"type": "DatasetReference"
							},
							"name": "SinkBronzeQuarantine"
						}
					],
					"transformations": [
						{
							"name": "FilterNew"
						},
						{
							"name": "Select4Silver"
						},
						{
							"name": "SplitQuarantine"
						},
						{
							"name": "LangKey"
						},
						{
							"name": "AggregateLanguage"
						},
						{
							"name": "SelectLangTable"
						},
						{
							"name": "JoinLangTable"
						},
						{
							"name": "SelectSilverFinal"
						},
						{
							"name": "SelectGenres"
						},
						{
							"name": "FlattenGenre"
						},
						{
							"name": "AggregateGenre"
						},
						{
							"name": "SelectMovieandGenre"
						},
						{
							"name": "FlattenGenreMovie"
						},
						{
							"name": "JoinBronzeBad"
						},
						{
							"name": "SelectBronzeBads"
						},
						{
							"name": "AddStatusBad"
						},
						{
							"name": "JoinBronzeGood"
						},
						{
							"name": "AddStatusGood"
						},
						{
							"name": "SelectBronzeGood"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
						"          DataSource as string,",
						"          IngestTime as timestamp,",
						"          Status as string,",
						"          IngestDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Bronze4Silver",
						"Bronze4Silver filter(equals(Status,\"new\")) ~> FilterNew",
						"FilterNew select(mapColumn(",
						"          movie,",
						"          Id = movie.Id,",
						"          Title = movie.Title,",
						"          Overview = movie.Overview,",
						"          Tagline = movie.Tagline,",
						"          Budget = movie.Budget,",
						"          Revenue = movie.Revenue,",
						"          ImdbUrl = movie.ImdbUrl,",
						"          TmdbUrl = movie.TmdbUrl,",
						"          PosterUrl = movie.PosterUrl,",
						"          BackdropUrl = movie.BackdropUrl,",
						"          OriginalLanguage = movie.OriginalLanguage,",
						"          ReleaseDate = movie.ReleaseDate,",
						"          RunTime = movie.RunTime,",
						"          Price = movie.Price,",
						"          CreatedDate = movie.CreatedDate,",
						"          UpdatedDate = movie.UpdatedDate,",
						"          UpdatedBy = movie.UpdatedBy,",
						"          CreatedBy = movie.CreatedBy,",
						"          genres = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select4Silver",
						"Select4Silver split(or(RunTime>0,Budget>=1000000),",
						"     disjoint: false) ~> SplitQuarantine@(GoodData, QuarantineData)",
						"AggregateLanguage keyGenerate(output(LangID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> LangKey",
						"Bronze4Silver aggregate(groupBy(OriginalLanguage = movie.OriginalLanguage),",
						"     Language = first(movie.OriginalLanguage)) ~> AggregateLanguage",
						"LangKey select(mapColumn(",
						"          LangID,",
						"          Lang = OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLangTable",
						"SplitQuarantine@GoodData, SelectLangTable join(OriginalLanguage == Lang,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLangTable",
						"JoinLangTable select(mapColumn(",
						"          Id,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          Budget,",
						"          Revenue,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          LangID,",
						"          ReleaseDate,",
						"          RunTime,",
						"          Price,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          CreatedBy,",
						"          UpdatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSilverFinal",
						"Bronze4Silver select(mapColumn(",
						"          genres = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGenres",
						"SelectGenres foldDown(unroll(genres, genres),",
						"     mapColumn(",
						"          id = genres.id,",
						"          name = genres.name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FlattenGenre",
						"FlattenGenre aggregate(groupBy(id),",
						"     name = first(name)) ~> AggregateGenre",
						"Bronze4Silver select(mapColumn(",
						"          movieId = movie.Id,",
						"          genre = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMovieandGenre",
						"SelectMovieandGenre foldDown(unroll(genre),",
						"     mapColumn(",
						"          movieId,",
						"          genreId = genre.id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenGenreMovie",
						"SplitQuarantine@QuarantineData, SelectBronzeGood join(toString(SplitQuarantine@QuarantineData@movie) == toString(SelectBronzeGood@movie),",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBronzeBad",
						"AddStatusBad select(mapColumn(",
						"          Status = NewStatus,",
						"          movie = SelectBronzeGood@movie,",
						"          DataSource,",
						"          IngestTime,",
						"          IngestDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBronzeBads",
						"JoinBronzeBad derive(NewStatus = iif(isNull(SplitQuarantine@QuarantineData@movie),Status,\"quarantined\")) ~> AddStatusBad",
						"SplitQuarantine@GoodData, Bronze4Silver join(toString(SplitQuarantine@GoodData@movie) == toString(Bronze4Silver@movie),",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBronzeGood",
						"JoinBronzeGood derive(NewStatus = iif(isNull(SplitQuarantine@GoodData@movie),Status,\"loaded\")) ~> AddStatusGood",
						"AddStatusGood select(mapColumn(",
						"          movie = Bronze4Silver@movie,",
						"          DataSource,",
						"          IngestTime,",
						"          Status = NewStatus,",
						"          IngestDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBronzeGood",
						"SelectSilverFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkMovieSilver",
						"SelectLangTable sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkLangSilver",
						"AggregateGenre sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkGenreSilver",
						"FlattenGenreMovie sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkGenreMovieSilver",
						"SelectBronzeBads sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkBronzeQuarantine"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze')]",
				"[concat(variables('factoryId'), '/datasets/silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze",
								"type": "DatasetReference"
							},
							"name": "Bronze"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobMovie",
								"type": "LinkedServiceReference"
							},
							"name": "Lang"
						},
						{
							"linkedService": {
								"referenceName": "AzureBlobMovie",
								"type": "LinkedServiceReference"
							},
							"name": "SilverMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkBronze"
						},
						{
							"dataset": {
								"referenceName": "silver",
								"type": "DatasetReference"
							},
							"name": "SinkSilver"
						}
					],
					"transformations": [
						{
							"name": "FilterQuarantined"
						},
						{
							"name": "Select4Update"
						},
						{
							"name": "FixBudgetRuntime"
						},
						{
							"name": "JoinQ"
						},
						{
							"name": "DeriveStatus"
						},
						{
							"name": "SelectBronze"
						},
						{
							"name": "JoinLang"
						},
						{
							"name": "SelectSilver"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
						"          DataSource as string,",
						"          IngestTime as timestamp,",
						"          Status as string,",
						"          IngestDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 5000,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Bronze",
						"source(output(",
						"          LangID as long,",
						"          Lang as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     container: 'data-factory-out',",
						"     folderPath: 'SilverLanguage') ~> Lang",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     container: 'data-factory-out',",
						"     folderPath: 'SilverMovie') ~> SilverMovie",
						"Bronze filter(equals(Status,\"quarantined\")) ~> FilterQuarantined",
						"FilterQuarantined select(mapColumn(",
						"          movie,",
						"          Id = movie.Id,",
						"          Title = movie.Title,",
						"          Overview = movie.Overview,",
						"          Tagline = movie.Tagline,",
						"          Budget = movie.Budget,",
						"          Revenue = movie.Revenue,",
						"          ImdbUrl = movie.ImdbUrl,",
						"          TmdbUrl = movie.TmdbUrl,",
						"          PosterUrl = movie.PosterUrl,",
						"          BackdropUrl = movie.BackdropUrl,",
						"          OriginalLanguage = movie.OriginalLanguage,",
						"          ReleaseDate = movie.ReleaseDate,",
						"          RunTime = movie.RunTime,",
						"          Price = movie.Price,",
						"          CreatedDate = movie.CreatedDate,",
						"          UpdatedDate = movie.UpdatedDate,",
						"          UpdatedBy = movie.UpdatedBy,",
						"          CreatedBy = movie.CreatedBy,",
						"          genres = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select4Update",
						"Select4Update derive(Budget = iif(Budget<1000000,1000000,toInteger(Budget)),",
						"          RunTime = abs(RunTime)) ~> FixBudgetRuntime",
						"FixBudgetRuntime, Bronze join(toString(Select4Update@movie) == toString(Bronze@movie),",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinQ",
						"JoinQ derive(NewStatus = iif(isNull(Select4Update@movie),Status,\"loaded\")) ~> DeriveStatus",
						"DeriveStatus select(mapColumn(",
						"          movie = Bronze@movie,",
						"          DataSource,",
						"          IngestTime,",
						"          IngestDate,",
						"          Status = NewStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBronze",
						"FixBudgetRuntime, Lang join(OriginalLanguage == Lang,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLang",
						"JoinLang select(mapColumn(",
						"          Id,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          Budget,",
						"          Revenue,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          LangID,",
						"          ReleaseDate,",
						"          RunTime,",
						"          Price,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSilver",
						"SelectBronze sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkBronze",
						"SelectSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobMovie')]",
				"[concat(variables('factoryId'), '/datasets/silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze2silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Make Silver Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SilverTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Bronze4Silver": {},
									"SinkMovieSilver": {
										"tableName": "SilverMovie"
									},
									"SinkLangSilver": {
										"tableName": "SilverLanguage"
									},
									"SinkGenreSilver": {
										"tableName": "SilverGenre"
									},
									"SinkGenreMovieSilver": {
										"tableName": "SilvMovieGenre"
									},
									"SinkBronzeQuarantine": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"runConcurrently": true,
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"value": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SilverTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw2bronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExplodeMovieJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExplodeMovieJSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ExplodeMovieJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_pipelines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw2bronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "raw2bronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze2silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw2bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze2silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/raw2bronze')]",
				"[concat(variables('factoryId'), '/pipelines/bronze2silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFProj')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movie_pipelines",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movie_pipelines",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movie_pipelines')]"
			]
		}
	]
}