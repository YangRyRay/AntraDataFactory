{
	"name": "SilverTable",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze",
						"type": "DatasetReference"
					},
					"name": "Bronze4Silver"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silver",
						"type": "DatasetReference"
					},
					"name": "SinkMovieSilver"
				},
				{
					"dataset": {
						"referenceName": "silver",
						"type": "DatasetReference"
					},
					"name": "SinkLangSilver"
				},
				{
					"dataset": {
						"referenceName": "silver",
						"type": "DatasetReference"
					},
					"name": "SinkGenreSilver"
				},
				{
					"dataset": {
						"referenceName": "silver",
						"type": "DatasetReference"
					},
					"name": "SinkGenreMovieSilver"
				},
				{
					"dataset": {
						"referenceName": "bronze",
						"type": "DatasetReference"
					},
					"name": "SinkBronzeQuarantine"
				}
			],
			"transformations": [
				{
					"name": "FilterNew"
				},
				{
					"name": "Select4Silver"
				},
				{
					"name": "SplitQuarantine"
				},
				{
					"name": "LangKey"
				},
				{
					"name": "AggregateLanguage"
				},
				{
					"name": "SelectLangTable"
				},
				{
					"name": "JoinLangTable"
				},
				{
					"name": "SelectSilverFinal"
				},
				{
					"name": "SelectGenres"
				},
				{
					"name": "FlattenGenre"
				},
				{
					"name": "AggregateGenre"
				},
				{
					"name": "SelectMovieandGenre"
				},
				{
					"name": "FlattenGenreMovie"
				},
				{
					"name": "JoinBronzeBad"
				},
				{
					"name": "SelectBronzeBads"
				},
				{
					"name": "AddStatusBad"
				},
				{
					"name": "JoinBronzeGood"
				},
				{
					"name": "AddStatusGood"
				},
				{
					"name": "SelectBronzeGood"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
				"          DataSource as string,",
				"          IngestTime as timestamp,",
				"          Status as string,",
				"          IngestDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Bronze4Silver",
				"Bronze4Silver filter(equals(Status,\"new\")) ~> FilterNew",
				"FilterNew select(mapColumn(",
				"          movie,",
				"          Id = movie.Id,",
				"          Title = movie.Title,",
				"          Overview = movie.Overview,",
				"          Tagline = movie.Tagline,",
				"          Budget = movie.Budget,",
				"          Revenue = movie.Revenue,",
				"          ImdbUrl = movie.ImdbUrl,",
				"          TmdbUrl = movie.TmdbUrl,",
				"          PosterUrl = movie.PosterUrl,",
				"          BackdropUrl = movie.BackdropUrl,",
				"          OriginalLanguage = movie.OriginalLanguage,",
				"          ReleaseDate = movie.ReleaseDate,",
				"          RunTime = movie.RunTime,",
				"          Price = movie.Price,",
				"          CreatedDate = movie.CreatedDate,",
				"          UpdatedDate = movie.UpdatedDate,",
				"          CreatedBy = movie.CreatedBy,",
				"          genres = movie.genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select4Silver",
				"Select4Silver split(or(RunTime>0,Budget>=1000000),",
				"     disjoint: false) ~> SplitQuarantine@(GoodData, QuarantineData)",
				"AggregateLanguage keyGenerate(output(LangID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> LangKey",
				"Bronze4Silver aggregate(groupBy(OriginalLanguage = movie.OriginalLanguage),",
				"     Language = first(movie.OriginalLanguage)) ~> AggregateLanguage",
				"LangKey select(mapColumn(",
				"          LangID,",
				"          Lang = OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLangTable",
				"SplitQuarantine@GoodData, SelectLangTable join(OriginalLanguage == Lang,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLangTable",
				"JoinLangTable select(mapColumn(",
				"          movie,",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          LangID,",
				"          ReleaseDate,",
				"          RunTime,",
				"          Price,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          CreatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSilverFinal",
				"Bronze4Silver select(mapColumn(",
				"          genres = movie.genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGenres",
				"SelectGenres foldDown(unroll(genres, genres),",
				"     mapColumn(",
				"          id = genres.id,",
				"          name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FlattenGenre",
				"FlattenGenre aggregate(groupBy(id),",
				"     name = first(name)) ~> AggregateGenre",
				"Bronze4Silver select(mapColumn(",
				"          movieId = movie.Id,",
				"          genre = movie.genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectMovieandGenre",
				"SelectMovieandGenre foldDown(unroll(genre),",
				"     mapColumn(",
				"          movieId,",
				"          genreId = genre.id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenGenreMovie",
				"SplitQuarantine@QuarantineData, SelectBronzeGood join(toString(SplitQuarantine@QuarantineData@movie) == toString(SelectBronzeGood@movie),",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBronzeBad",
				"AddStatusBad select(mapColumn(",
				"          Status = NewStatus,",
				"          movie = SelectBronzeGood@movie,",
				"          DataSource,",
				"          IngestTime,",
				"          IngestDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBronzeBads",
				"JoinBronzeBad derive(NewStatus = iif(isNull(SplitQuarantine@QuarantineData@movie),Status,\"quarantined\")) ~> AddStatusBad",
				"SplitQuarantine@GoodData, Bronze4Silver join(toString(SplitQuarantine@GoodData@movie) == toString(Bronze4Silver@movie),",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBronzeGood",
				"JoinBronzeGood derive(NewStatus = iif(isNull(SplitQuarantine@GoodData@movie),Status,\"loaded\")) ~> AddStatusGood",
				"AddStatusGood select(mapColumn(",
				"          movie = Bronze4Silver@movie,",
				"          DataSource,",
				"          IngestTime,",
				"          Status = NewStatus,",
				"          IngestDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBronzeGood",
				"SelectSilverFinal sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkMovieSilver",
				"SelectLangTable sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkLangSilver",
				"AggregateGenre sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkGenreSilver",
				"FlattenGenreMovie sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkGenreMovieSilver",
				"SelectBronzeBads sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkBronzeQuarantine"
			]
		}
	}
}