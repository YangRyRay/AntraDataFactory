{
	"name": "SilverUpdate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze",
						"type": "DatasetReference"
					},
					"name": "Bronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FilterQuarantined"
				},
				{
					"name": "Select4Update"
				},
				{
					"name": "FixBudgetRuntime"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
				"          DataSource as string,",
				"          IngestTime as timestamp,",
				"          Status as string,",
				"          IngestDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 5000,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Bronze",
				"Bronze filter(equals(Status,\"quarantined\")) ~> FilterQuarantined",
				"FilterQuarantined select(mapColumn(",
				"          movie,",
				"          Id = movie.Id,",
				"          Title = movie.Title,",
				"          Overview = movie.Overview,",
				"          Tagline = movie.Tagline,",
				"          Budget = movie.Budget,",
				"          Revenue = movie.Revenue,",
				"          ImdbUrl = movie.ImdbUrl,",
				"          TmdbUrl = movie.TmdbUrl,",
				"          PosterUrl = movie.PosterUrl,",
				"          BackdropUrl = movie.BackdropUrl,",
				"          OriginalLanguage = movie.OriginalLanguage,",
				"          ReleaseDate = movie.ReleaseDate,",
				"          RunTime = movie.RunTime,",
				"          Price = movie.Price,",
				"          CreatedDate = movie.CreatedDate,",
				"          UpdatedDate = movie.UpdatedDate,",
				"          UpdatedBy = movie.UpdatedBy,",
				"          CreatedBy = movie.CreatedBy,",
				"          genres = movie.genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select4Update",
				"Select4Update derive(Budget = iif(Budget<1000000,1000000,toInteger(Budget)),",
				"          RunTime = abs(RunTime)) ~> FixBudgetRuntime",
				"FixBudgetRuntime, Bronze join(toString(Select4Update@movie) == toString(Bronze@movie),",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(NewStatus = iif(isNull(Select4Update@movie),Status,\"loaded\")) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          movie = Select4Update@movie,",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          OriginalLanguage,",
				"          ReleaseDate,",
				"          RunTime = Select4Update@RunTime,",
				"          Price,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          UpdatedBy,",
				"          CreatedBy,",
				"          genres,",
				"          Runtime = RunTime,",
				"          movie = Bronze@movie,",
				"          DataSource,",
				"          IngestTime,",
				"          Status,",
				"          IngestDate,",
				"          NewStatus",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"FixBudgetRuntime select(mapColumn(",
				"          movie,",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          OriginalLanguage,",
				"          ReleaseDate,",
				"          RunTime = Select4Update@RunTime,",
				"          Price,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          UpdatedBy,",
				"          CreatedBy,",
				"          genres,",
				"          Runtime = RunTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}